{"version":3,"sources":["..\\webpack/bootstrap","..\\./src/validationResult.ts","..\\./src/fieldType.ts","..\\./src/field.ts","..\\./src/util.ts","..\\./src/constants.ts","..\\./src/ruleInstanceList.ts","..\\./src/fieldTagTypeList.ts","..\\./src/nval.ts","..\\./index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","FieldType","ValidationResult","createError","message","isValid","elements","result","createOk","field_Field","Field","fieldType","this","firstError","activeRules","rules","filter","x","isActive","length","ruleWrapper","errorMessage","validationResult","instance","apply","Constants","nodeListToArray","nodeList","Array","slice","tryGetValue","element","getNumberFromAttrOrDefault","attrName","defaultValue","parseFloat","getAttribute","ruleInstanceList","fieldTypes","Text","Textarea","Select","Number","Email","val","trim","minLength","parseInt","dataset","replace","toString","maxLength","Checkbox","Radio","map","checked","min","max","numValue","match","fieldTagTypeList","tag","type","File","nval_NVal","NVal","htmlFormElement","fields","rulesInstances","eventFunctions","initFields","initEvents","hideErrors","showError","isValidElement","htmlElement","field","getFieldByElement","console","log","_this","self","forEach","tagType","querySelectorAll","sameNameDict","el","undefined","push","f","elGrp","_a","getRulesWrappersFromAttributes","inputElements","order","indexOf","sort","a","b","fn","event","addEventListener","removeEvents","ef","removeEventListener","ruleWrappers","dataSet","__assign","ruleName","toLowerCase","ruleInstance","getErrorPlacementContainers","errorPlacementTag","substr","document","getElementById","getElementsByTagName","classList","add","ValidationErrorClassName","ec","innerHTML","ErrorMessageClassName","remove","destroy","addGlobalRules","ruleInstances","addRuleWrappers","toggleRule","rule","__webpack_exports__"],"mappings":"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","file":"nval.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","export class ValidationResult {\r\n    public message: string;\r\n    public isValid: boolean;\r\n    public elements: HTMLElement[];\r\n\r\n    public static createError(message: string, isValid: boolean, elements: HTMLElement[]): ValidationResult {\r\n        var result = new ValidationResult();\r\n        result.message = message;\r\n        result.isValid = isValid;\r\n        result.elements = elements;\r\n        return result;\r\n    }\r\n\r\n    public static createOk(elements: HTMLElement[]): ValidationResult {\r\n        var result = new ValidationResult();\r\n        result.isValid = true;\r\n        result.elements = elements;\r\n        return result;\r\n    }\r\n}","\r\nexport enum FieldType {\r\n    Text,\r\n    Number,\r\n    Email,\r\n    Textarea,\r\n    File,\r\n    Checkbox,\r\n    Radio,\r\n    Select\r\n}","import { ValidationResult } from \"./validationResult\";\r\nimport {IRuleWrapper} from \"./ruleWrapper\";\r\nimport {FieldType} from \"./fieldType\";\r\n\r\n/**\r\n * Field which includes one or more elements.\r\n */\r\nexport class Field {\r\n    /**\r\n     * Order of the element in the DOM.\r\n     */\r\n    public order: number;\r\n    /**\r\n     * One or more elements (> 1 in case of the same name group: checkboxes, radios).\r\n     */\r\n    public elements: HTMLElement[] = [];\r\n\r\n\r\n    public fieldType: FieldType;\r\n\r\n    /**\r\n     * Rule wrappers.\r\n     */\r\n    public rules: IRuleWrapper[];\r\n\r\n    constructor(fieldType: FieldType) {\r\n        this.fieldType = fieldType;\r\n    }\r\n\r\n    /**\r\n     * Validate field which includes one or more elements.\r\n     */\r\n    public isValid(): ValidationResult {\r\n        var activeRules = this.rules.filter(x => x.isActive);\r\n        if (activeRules.length === 0)\r\n            return ValidationResult.createOk(this.elements);\r\n        \r\n        var firstError: ValidationResult;\r\n\r\n        for (var i = 0; i < activeRules.length; i++) {\r\n            var ruleWrapper = activeRules[i];\r\n            var errorMessage = ruleWrapper.errorMessage;\r\n            var validationResult = ruleWrapper.instance.apply(this.elements, errorMessage);\r\n            if (!validationResult.isValid) {\r\n                firstError = validationResult;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (firstError != null)\r\n            return firstError;\r\n\r\n        return ValidationResult.createOk(this.elements);\r\n    }\r\n}\r\n","export const nodeListToArray = (nodeList: NodeListOf<Element>) : HTMLElement[] => {\r\n    return Array.prototype.slice.call(nodeList) as HTMLElement[];\r\n}\r\n\r\nexport const tryGetValue = (element: HTMLElement): any => {\r\n    var val = (element as any).value;\r\n    return val;\r\n}\r\n\r\nexport const getNumberFromAttrOrDefault = (element: HTMLElement, attrName: string, defaultValue: number): number => {\r\n    return parseFloat(element.getAttribute(attrName) || defaultValue as any);\r\n}","export enum Constants {\r\n    MessageAttrSuffix = \"msg\",\r\n    ValidationErrorClassName = \"validation-error\",\r\n    ErrorMessageClassName = \"error-message\"\r\n}","import { IRuleInstance } from \"./ruleInstance\";\r\nimport { FieldType } from \"./fieldType\";\r\nimport { tryGetValue, getNumberFromAttrOrDefault } from \"./util\";\r\nimport { ValidationResult } from \"./validationResult\";\r\n\r\nexport const ruleInstanceList: IRuleInstance[] = [\r\n    {\r\n        fieldTypes: [FieldType.Text, FieldType.Textarea, FieldType.Select, FieldType.Number, FieldType.Email],\r\n        name: \"required\",\r\n        apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n            var val = tryGetValue(elements[0]);\r\n            if (val == null)\r\n                return ValidationResult.createError(errorMessage, false, elements);\r\n            val = val.trim();\r\n            var isValid = val !== \"\";\r\n            return isValid ? ValidationResult.createOk(elements) :\r\n                ValidationResult.createError(errorMessage, false, elements);\r\n        }\r\n    },\r\n    {\r\n        fieldTypes: [FieldType.Text, FieldType.Textarea, FieldType.Email],\r\n        name: \"minlength\",\r\n        apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n            var element = elements[0];\r\n            var val = tryGetValue(element);\r\n            if (val == null)\r\n                return ValidationResult.createError(errorMessage, false, elements);\r\n            val = val.trim();\r\n            var minLength = parseInt(element.dataset[\"valMinlength\"] || 0 as any);\r\n            var isValid = val.length >= minLength;\r\n            if(!isValid)\r\n                errorMessage = errorMessage.replace(\"{0}\", minLength.toString());\r\n            return isValid ? ValidationResult.createOk(elements) :\r\n                ValidationResult.createError(errorMessage, false, elements);\r\n        }\r\n    },\r\n    {\r\n        fieldTypes: [FieldType.Text, FieldType.Textarea, FieldType.Email],\r\n        name: \"maxlength\",\r\n        apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n            var element = elements[0];\r\n            var val = tryGetValue(element);\r\n            if (val == null)\r\n                return ValidationResult.createError(errorMessage, false, elements);\r\n            val = val.trim();\r\n            var maxLength = parseInt(element.dataset[\"valMaxlength\"] || 0 as any);\r\n            var isValid = val.length <= maxLength;\r\n            if(!isValid)\r\n                errorMessage = errorMessage.replace(\"{0}\", maxLength.toString());\r\n            return isValid ? ValidationResult.createOk(elements) :\r\n                ValidationResult.createError(errorMessage, false, elements);\r\n        }\r\n    },\r\n    {\r\n        fieldTypes: [FieldType.Checkbox, FieldType.Radio],\r\n        name: \"required\",\r\n        apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n            var isValid = elements.map((x: any) => x.checked).filter((x: boolean) => x).length > 0;\r\n            return isValid ? ValidationResult.createOk(elements) :\r\n                ValidationResult.createError(errorMessage, false, elements);\r\n        }\r\n    },\r\n    {\r\n        fieldTypes: [FieldType.Number],\r\n        name: \"range\",\r\n        apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n            var element = elements[0];\r\n            var min = getNumberFromAttrOrDefault(element, \"min\", -9999999999999999);\r\n            var max = getNumberFromAttrOrDefault(element, \"max\", 9999999999999999);\r\n            var val = tryGetValue(element);\r\n            if (val == null)\r\n                return ValidationResult.createOk(elements);\r\n            var numValue = parseFloat(val);\r\n            var isValid = min <= numValue && numValue <= max;\r\n            if (!isValid)\r\n                errorMessage = errorMessage.replace(\"{0}\", min.toString()).replace(\"{1}\", max.toString());            \r\n            return isValid ? ValidationResult.createOk(elements) :\r\n                ValidationResult.createError(errorMessage, false, elements);\r\n        }\r\n    },\r\n    {\r\n        fieldTypes: [FieldType.Number],\r\n        name: \"min\",\r\n        apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n            var element = elements[0];\r\n            var min = getNumberFromAttrOrDefault(element, \"min\", -9999999999999999);\r\n            var val = tryGetValue(element);\r\n            if (val == null)\r\n                return ValidationResult.createOk(elements);\r\n            var numValue = parseFloat(val);\r\n            var isValid = min <= numValue;\r\n            if (!isValid)\r\n                errorMessage = errorMessage.replace(\"{0}\", min.toString());\r\n            return isValid ? ValidationResult.createOk(elements) :\r\n                ValidationResult.createError(errorMessage, false, elements);\r\n        }\r\n    },\r\n    {\r\n        fieldTypes: [FieldType.Number],\r\n        name: \"max\",\r\n        apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n            var element = elements[0];\r\n            var max = getNumberFromAttrOrDefault(element, \"min\", 9999999999999999);\r\n            var val = tryGetValue(element);\r\n            if (val == null)\r\n                return ValidationResult.createOk(elements);\r\n            var numValue = parseFloat(val);\r\n            var isValid = numValue <= max;\r\n            if (!isValid)\r\n                errorMessage = errorMessage.replace(\"{0}\", max.toString());\r\n            return isValid ? ValidationResult.createOk(elements) :\r\n                ValidationResult.createError(errorMessage, false, elements);\r\n        }\r\n    },    \r\n    {\r\n        fieldTypes: [FieldType.Email],\r\n        name: \"email\",\r\n        apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n            var element = elements[0];\r\n            var val = tryGetValue(element);\r\n            if (val == null)\r\n                return ValidationResult.createOk(elements);\r\n\r\n            var rx = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n            var isValid = val.match(rx) != null;\r\n\r\n            return isValid ? ValidationResult.createOk(elements) :\r\n                ValidationResult.createError(errorMessage, false, elements);\r\n        }\r\n    }\r\n];","import {FieldType} from \"./fieldType\";\r\nimport {IFieldTagTypePair} from \"./fieldTagTypePair\";\r\n\r\n/**\r\n * Field and tag pair list.\r\n */\r\nexport const fieldTagTypeList: IFieldTagTypePair[] = [\r\n    {\r\n        tag: \"input[type=checkbox]\",\r\n        type: FieldType.Checkbox\r\n    },\r\n    {\r\n        tag: \"input[type=radio]\",\r\n        type: FieldType.Radio\r\n    },\r\n    {\r\n        tag: \"input[type=text]\",\r\n        type: FieldType.Text\r\n    },\r\n    {\r\n        tag: \"input[type=email]\",\r\n        type: FieldType.Email\r\n    },\r\n    {\r\n        tag: \"input[type=file]\",\r\n        type: FieldType.File\r\n    },\r\n    {\r\n        tag: \"input[type=number]\",\r\n        type: FieldType.Number\r\n    },\r\n    {\r\n        tag: \"select\",\r\n        type: FieldType.Select\r\n    },\r\n    {\r\n        tag: \"textarea\",\r\n        type: FieldType.Textarea\r\n    }];","import { Field } from \"./field\";\r\nimport { IRuleWrapper } from \"./ruleWrapper\";\r\nimport { ruleInstanceList } from \"./ruleInstanceList\";\r\nimport { fieldTagTypeList } from \"./fieldTagTypeList\";\r\nimport { FieldType } from \"./fieldType\";\r\nimport { ValidationResult } from \"./validationResult\";\r\nimport { Constants } from \"./constants\";\r\nimport { nodeListToArray } from \"./util\";\r\nimport { IRuleInstance } from \"./ruleInstance\";\r\n\r\nexport class NVal {\r\n    protected element: HTMLFormElement;\r\n\r\n    protected fields: Field[] = [];\r\n\r\n    protected rulesInstances: IRuleInstance[] = [...ruleInstanceList];\r\n\r\n    /**\r\n     * Validate form.\r\n     */\r\n    public isValid(): boolean {\r\n        if (this.fields == null || this.fields.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        this.hideErrors(this.fields);\r\n        for (var i = 0; i < this.fields.length; i++) {\r\n            var validationResult = this.fields[i].isValid();\r\n            if (!validationResult.isValid) {\r\n                this.showError(validationResult);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validate element.\r\n     * @param htmlElement\r\n     */\r\n    public isValidElement(htmlElement: HTMLElement): boolean {\r\n        if (this.fields == null || this.fields.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        this.hideErrors(this.fields);\r\n\r\n        var field = this.getFieldByElement(htmlElement);\r\n        if (field == null) {\r\n            console.log(\"NVal: field not found.\");\r\n            return true;\r\n        }\r\n\r\n        var validationResult = field.isValid();\r\n        if (!validationResult.isValid) {\r\n            this.showError(validationResult);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    constructor(htmlFormElement: HTMLFormElement) {\r\n\r\n        this.element = htmlFormElement;\r\n\r\n        this.initFields(htmlFormElement);\r\n        this.initEvents();\r\n    }\r\n\r\n    protected initFields(htmlFormElement: HTMLFormElement): void {\r\n        var self = this;\r\n\r\n        this.fields = [];\r\n\r\n        fieldTagTypeList.forEach(tagType => {\r\n            var nodeList = htmlFormElement.querySelectorAll(tagType.tag);\r\n\r\n            if (tagType.type === FieldType.Radio || tagType.type === FieldType.Checkbox) {\r\n                var sameNameDict = [];\r\n                var elements = nodeListToArray(nodeList);\r\n                elements.forEach(el => {\r\n                    var name = (el as any).name;\r\n                    if (sameNameDict[name] === undefined) {\r\n                        sameNameDict[name] = [];\r\n                    }\r\n                    sameNameDict[name].push(el);\r\n                });\r\n\r\n                for (var key in sameNameDict) {\r\n\r\n                    var f: Field = new Field(tagType.type);\r\n\r\n                    var elGrp = sameNameDict[key];\r\n                    f.elements.push(...elGrp);\r\n\r\n                    // Get rules from the first element.\r\n                    f.rules = this.getRulesWrappersFromAttributes(tagType.type, f.elements[0]);\r\n\r\n                    self.fields.push(f);\r\n                }\r\n            } else {\r\n                var elements = Array.prototype.slice.call(nodeList) as HTMLElement[];\r\n                elements.forEach(el => {\r\n\r\n                    var f: Field = new Field(tagType.type);\r\n\r\n                    f.elements.push(el);\r\n\r\n                    // Get rules from the first element.\r\n                    f.rules = this.getRulesWrappersFromAttributes(tagType.type, el);\r\n\r\n                    self.fields.push(f);\r\n                });\r\n            }\r\n        });\r\n\r\n        var inputElements = nodeListToArray(htmlFormElement.querySelectorAll('input, select, textarea'));\r\n        this.fields.forEach(field => {\r\n            field.order = inputElements.indexOf(field.elements[0]);\r\n        });\r\n        this.fields = this.fields.sort((a, b) => a.order - b.order);\r\n    }\r\n\r\n    /**\r\n     * Need for delete events.\r\n     */\r\n    protected eventFunctions: any[] = [];\r\n\r\n    protected initEvents() {\r\n        var self = this;\r\n        this.fields.forEach(field => {\r\n            field.elements.forEach(el => {\r\n                var fn = (event) => {\r\n                    self.isValidElement(el);\r\n                };\r\n                self.eventFunctions.push(fn);\r\n                el.addEventListener(\"change\", fn);\r\n            });\r\n        });\r\n    }\r\n\r\n    protected removeEvents() {\r\n        var self = this;\r\n        this.fields.forEach(field => {\r\n            field.elements.forEach(el => {\r\n                self.eventFunctions.forEach(ef => {\r\n                    el.removeEventListener(\"change\", ef);\r\n                });\r\n            });\r\n        });\r\n        this.eventFunctions = [];\r\n    }\r\n\r\n\r\n    protected getRulesWrappersFromAttributes(fieldType: FieldType, htmlElement: HTMLElement): IRuleWrapper[] {\r\n\r\n        var self = this;\r\n\r\n        var ruleWrappers: IRuleWrapper[] = [];\r\n\r\n        var dataSet = { ...htmlElement.dataset };\r\n\r\n        dataSet[`val${htmlElement.getAttribute(\"type\")}`] = \"true\";\r\n\r\n        for (var key in dataSet) {\r\n\r\n            // Grab the rules here.\r\n\r\n            if (dataSet.hasOwnProperty(key)) {\r\n                if (key.indexOf(\"val\") === 0) {\r\n\r\n                    var ruleName = key.replace(\"val\", \"\").toLowerCase();\r\n                    var ruleInstance = self.rulesInstances.filter(x => x.name === ruleName && x.fieldTypes.indexOf(fieldType) > -1)[0];\r\n\r\n                    if (ruleInstance == null) {\r\n                        continue;\r\n                    }\r\n\r\n                    var ruleWrapper: IRuleWrapper = {\r\n                        isActive: true,\r\n                        instance: ruleInstance,\r\n                        errorMessage: \"\"\r\n                    };\r\n\r\n                    if (ruleWrappers != null) {\r\n                        ruleWrappers.push(ruleWrapper);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (var key in dataSet) {\r\n\r\n            // Grab error messages here.\r\n\r\n            if (dataSet.hasOwnProperty(key)) {\r\n                if (key.indexOf(\"msg\") === 0) {\r\n\r\n                    var ruleName = key.replace(\"msg\", \"\").toLowerCase();\r\n                    var ruleWrapper = ruleWrappers.filter(x => x.instance.name === ruleName)[0];\r\n                    if (ruleWrapper != null) {\r\n                        ruleWrapper.errorMessage = htmlElement.getAttribute(`data-msg-${ruleName}`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return ruleWrappers;\r\n    }\r\n\r\n\r\n    protected getErrorPlacementContainers(element: HTMLElement): HTMLElement[] {\r\n        var errorPlacementTag = element.dataset[\"error\"];\r\n\r\n        if (errorPlacementTag != null) {\r\n            if (errorPlacementTag[0] === \"#\") {\r\n\r\n                errorPlacementTag = errorPlacementTag.substr(1);\r\n\r\n                var errorPlacementElement = document.getElementById(errorPlacementTag);\r\n\r\n                if (errorPlacementElement == null) {\r\n                    console.log(`NVal: error placement element with id '#${errorPlacementTag}' not found.`);\r\n                    return [];\r\n                }\r\n\r\n                return [document.getElementById(errorPlacementTag)];\r\n            }\r\n            return nodeListToArray(document.getElementsByTagName(errorPlacementTag));\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    protected showError(validationResult: ValidationResult): void {\r\n        validationResult.elements.forEach(el => {\r\n            el.classList.add(Constants.ValidationErrorClassName);\r\n        });\r\n\r\n        this.getErrorPlacementContainers(validationResult.elements[0]).forEach(ec => {\r\n            \r\n            if (ec != null) {\r\n                ec.innerHTML =\r\n                    `<span class=\"${Constants.ErrorMessageClassName}\">${validationResult.message}</span>`;\r\n            }\r\n        });\r\n    }\r\n\r\n    protected hideErrors(fields: Field[]) {\r\n        fields.forEach(field => {\r\n            field.elements.forEach(el => {\r\n                el.classList.remove(Constants.ValidationErrorClassName);\r\n                this.getErrorPlacementContainers(el).forEach(ec => {\r\n                    if (ec != null) {\r\n                        ec.innerHTML = \"\";\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    public destroy() {\r\n        this.hideErrors(this.fields);\r\n        this.removeEvents();\r\n        this.fields = [];\r\n        this.element = null;\r\n    }\r\n\r\n    public addGlobalRules(ruleInstances: IRuleInstance[]): void {\r\n        this.rulesInstances.push(...ruleInstances);\r\n        this.fields = [];\r\n        this.initFields(this.element);\r\n    }\r\n\r\n    public addRuleWrappers(htmlElement: HTMLElement, ruleWrappers: IRuleWrapper[]): void {\r\n        var field = this.getFieldByElement(htmlElement);\r\n        if (field != null) {\r\n            field.rules.push(...ruleWrappers);\r\n        }\r\n    }\r\n\r\n    public toggleRule(htmlElement: HTMLElement, ruleName: string, isActive: boolean): void {\r\n        var field = this.getFieldByElement(htmlElement);\r\n        if (field == null) {\r\n            console.log(\"NVal: field not found.\");\r\n            return;\r\n        }\r\n        var rule = field.rules.filter(x => x.instance.name === ruleName)[0];\r\n        if (rule == null) {\r\n            console.log(`NVal: rule with name ${ruleName} not found.`);\r\n            return;\r\n        }\r\n        rule.isActive = isActive;\r\n    }\r\n\r\n    protected getFieldByElement(htmlElement: HTMLElement): Field {\r\n        return this.fields.filter(x => x.elements.indexOf(htmlElement) > -1)[0];\r\n    }\r\n}","﻿export { NVal } from \"./src/nval\";\r\nexport { ValidationResult } from \"./src/validationResult\";\r\nexport { Field } from \"./src/field\";\r\nexport { FieldType } from \"./src/fieldType\";\r\nexport { IRuleWrapper } from \"./src/ruleWrapper\";\r\nexport { IRuleInstance } from \"./src/ruleInstance\";"],"sourceRoot":""}